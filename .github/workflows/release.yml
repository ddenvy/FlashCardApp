name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '2.1.2'

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
    
    - name: Get version
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=2.1.2-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build Windows installer
      shell: pwsh
      run: |
        ./installer/Build-Windows-Installer.ps1 -Version "${{ steps.get_version.outputs.VERSION }}"
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: QuickMind-Windows-v${{ steps.get_version.outputs.VERSION }}
        path: ./dist/QuickMind-Setup-v${{ steps.get_version.outputs.VERSION }}.exe

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [osx-x64, osx-arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=2.1.2-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build and publish
      run: |
        dotnet publish -c Release -r ${{ matrix.arch }} --self-contained true -p:PublishSingleFile=false -o "./publish/${{ matrix.arch }}"
    
    - name: Create .app bundle
      run: |
        APP_NAME="QuickMind"
        BUNDLE_ID="com.quickmind.app"
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        ARCH="${{ matrix.arch }}"
        
        echo "Creating .app bundle for $ARCH..."
        
        # Ensure dist directory exists
        mkdir -p "./dist"
        
        # Create .app bundle structure
        APP_DIR="./dist/$APP_NAME-$ARCH.app"
        mkdir -p "$APP_DIR/Contents/MacOS"
        mkdir -p "$APP_DIR/Contents/Resources"
        
        # Copy executable and dependencies
        cp -r ./publish/$ARCH/* "$APP_DIR/Contents/MacOS/"
        
        # Create Info.plist
        cat > "$APP_DIR/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>QuickMind</string>
            <key>CFBundleIconFile</key>
            <string>QuickMind.icns</string>
            <key>CFBundleIdentifier</key>
            <string>$BUNDLE_ID</string>
            <key>CFBundleName</key>
            <string>$APP_NAME</string>
            <key>CFBundleDisplayName</key>
            <string>$APP_NAME</string>
            <key>CFBundleVersion</key>
            <string>$VERSION</string>
            <key>CFBundleShortVersionString</key>
            <string>$VERSION</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleSignature</key>
            <string>????</string>
            <key>LSMinimumSystemVersion</key>
            <string>11.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
            <key>LSApplicationCategoryType</key>
            <string>public.app-category.education</string>
        </dict>
        </plist>
        EOF
        
        # Convert PNG icon to ICNS if available
        if [ -f "Assets/QuickMindLogo.png" ]; then
          echo "Converting icon to .icns format..."
          mkdir -p QuickMind.iconset
          
          # Create different sizes for iconset
          sips -z 16 16     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_16x16.png
          sips -z 32 32     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_16x16@2x.png
          sips -z 32 32     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_32x32.png
          sips -z 64 64     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_32x32@2x.png
          sips -z 128 128   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_128x128.png
          sips -z 256 256   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_128x128@2x.png
          sips -z 256 256   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_256x256.png
          sips -z 512 512   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_256x256@2x.png
          sips -z 512 512   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_512x512.png
          sips -z 1024 1024 Assets/QuickMindLogo.png --out QuickMind.iconset/icon_512x512@2x.png
          
          # Create .icns file
          iconutil -c icns QuickMind.iconset
          cp QuickMind.icns "$APP_DIR/Contents/Resources/"
          
          # Clean up
          rm -rf QuickMind.iconset
        else
          echo "Warning: Logo file not found, skipping icon conversion"
        fi
        
        # Make executable
        chmod +x "$APP_DIR/Contents/MacOS/QuickMind"
        
        echo "App bundle created at: $APP_DIR"
    
    - name: Create DMG
      run: |
        APP_NAME="QuickMind"
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        ARCH="${{ matrix.arch }}"
        
        echo "Creating DMG for $ARCH..."
        
        # Ensure dist directory exists
        mkdir -p "./dist"
        
        # Create temporary directory for DMG content
        DMG_DIR="./dist/dmg_temp_$ARCH"
        mkdir -p "$DMG_DIR"
        
        # Copy app to DMG directory
        if [ ! -d "./dist/$APP_NAME-$ARCH.app" ]; then
          echo "Error: App bundle not found at ./dist/$APP_NAME-$ARCH.app"
          exit 1
        fi
        cp -r "./dist/$APP_NAME-$ARCH.app" "$DMG_DIR/"
        
        # Create symlink to Applications
        ln -s /Applications "$DMG_DIR/Applications"
        
        # Create DMG
        DMG_NAME="$APP_NAME-$ARCH-v$VERSION.dmg"
        
        # Remove existing DMG if it exists
        if [ -f "./dist/$DMG_NAME" ]; then
          echo "Removing existing DMG file..."
          rm -f "./dist/$DMG_NAME"
        fi
        
        hdiutil create -srcfolder "$DMG_DIR" -volname "$APP_NAME v$VERSION ($ARCH)" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDBZ -size 200m "./dist/$DMG_NAME"
        
        # Clean up
        rm -rf "$DMG_DIR"
        
        echo "DMG created: ./dist/$DMG_NAME"
        ls -lh "./dist/$DMG_NAME"
    
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: QuickMind-${{ matrix.arch }}-v${{ steps.get_version.outputs.VERSION }}
        path: ./dist/QuickMind-${{ matrix.arch }}-v${{ steps.get_version.outputs.VERSION }}.dmg

  trigger-linux-build:
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/build-linux.yml
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || (startsWith(github.ref, 'refs/tags/v') && github.ref_name) || '2.1.2-dev' }}

  create-release:
    needs: [build-windows, build-macos, trigger-linux-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=2.1.2-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Display structure
      run: find . -type f -name "*.exe" -o -name "*.dmg" | head -20
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: QuickMind v${{ steps.get_version.outputs.VERSION }}
        make_latest: true
        generate_release_notes: false
        body: |
          ## QuickMind v${{ steps.get_version.outputs.VERSION }}
          
          ### 🚀 New Features
          - Updated dark interface design
          - Consistent element sizing throughout
          - Improved UI consistency
          - Fixed data binding issues
          
          ### 💾 Download
          
          #### Windows
          - **QuickMind-Setup-v${{ steps.get_version.outputs.VERSION }}.exe** - Complete installer for Windows 10/11
          
          #### macOS
          - **QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}.dmg** - For Intel Macs
          - **QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}.dmg** - For Apple Silicon Macs (M1/M2/M3)
          
          #### Linux
          - **quickmind_${{ steps.get_version.outputs.VERSION }}_amd64.deb** - Debian/Ubuntu (x64)
          - **quickmind_${{ steps.get_version.outputs.VERSION }}_arm64.deb** - Debian/Ubuntu (ARM64)
          - **quickmind-${{ steps.get_version.outputs.VERSION }}-1.*.x86_64.rpm** - Red Hat/Fedora/openSUSE (x64)
          - **quickmind-${{ steps.get_version.outputs.VERSION }}-1.*.aarch64.rpm** - Red Hat/Fedora/openSUSE (ARM64)
          - **QuickMind-${{ steps.get_version.outputs.VERSION }}-x86_64.AppImage** - Universal AppImage (x64)
          - **QuickMind-${{ steps.get_version.outputs.VERSION }}.flatpak** - Flatpak package
          
          ### 📋 Installation Instructions
          
          #### Windows
          1. Download the `QuickMind-Setup-v${{ steps.get_version.outputs.VERSION }}.exe` file
          2. Run the installer as administrator
          3. Follow the installation wizard instructions
          4. Launch the application from the Start menu
          
          #### macOS
          1. Download the appropriate DMG file for your Mac
          2. Open the DMG file
          3. Drag QuickMind.app to the Applications folder
          4. Launch QuickMind from the Applications folder
          5. You may need to allow the app in Security settings on first launch
          
          #### Linux
          
          **Debian/Ubuntu (.deb):**
          ```bash
          sudo dpkg -i quickmind_${{ steps.get_version.outputs.VERSION }}_amd64.deb
          sudo apt-get install -f  # If there are dependency issues
          ```
          
          **Red Hat/Fedora/openSUSE (.rpm):**
          ```bash
          sudo rpm -i quickmind-${{ steps.get_version.outputs.VERSION }}-1.*.x86_64.rpm
          # or
          sudo dnf install quickmind-${{ steps.get_version.outputs.VERSION }}-1.*.x86_64.rpm
          ```
          
          **AppImage (universal):**
          ```bash
          chmod +x QuickMind-${{ steps.get_version.outputs.VERSION }}-x86_64.AppImage
          ./QuickMind-${{ steps.get_version.outputs.VERSION }}-x86_64.AppImage
          ```
          
          **Flatpak:**
          ```bash
          flatpak install --user QuickMind-${{ steps.get_version.outputs.VERSION }}.flatpak
          flatpak run com.quickmind.QuickMind
          ```
          
          **Arch Linux:**
          Use PKGBUILD from quickmind-${{ steps.get_version.outputs.VERSION }}-src.tar.gz archive
          
          **Gentoo:**
          Use ebuild from quickmind-${{ steps.get_version.outputs.VERSION }}-src.tar.gz archive
          
          ### 🔧 System Requirements
          
          #### Windows
          - Windows 10 version 1809 or later
          - Windows 11 (recommended)
          - 50 MB free disk space
          
          #### macOS
          - macOS 11.0 (Big Sur) or later
          - 50 MB free disk space
          
          #### Linux
          - Linux kernel 3.17+ (for glibc 2.17+)
          - X11 or Wayland display server
          - 50 MB free disk space
          - Supported distributions:
            - Ubuntu 18.04+, Debian 9+
            - Fedora 29+, CentOS 8+, RHEL 8+
            - openSUSE Leap 15.0+
            - Arch Linux (current)
            - Gentoo (current)
          
          ### 🏗️ Build
          Built with .NET 9.0 and Avalonia UI
          
          ---
          
          **Full changelog**: https://github.com/ddenvy/QuickMind/compare/v2.0.0...v${{ steps.get_version.outputs.VERSION }}
        files: |
          QuickMind-Windows-v${{ steps.get_version.outputs.VERSION }}/QuickMind-Setup-v${{ steps.get_version.outputs.VERSION }}.exe
          QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}/QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}.dmg
          QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}/QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}.dmg
          quickmind-deb-linux-x64/*.deb
          quickmind-deb-linux-arm64/*.deb
          quickmind-rpm-linux-x64/*.rpm
          quickmind-rpm-linux-arm64/*.rpm
          quickmind-appimage-linux-x64/*.AppImage

          quickmind-flatpak/*.flatpak

          quickmind-source-packages/*.tar.gz
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        token: ${{ secrets.GITHUB_TOKEN }} 