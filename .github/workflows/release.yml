name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '2.1.0'

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
    
    - name: Get version
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=2.1.0-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build Windows installer
      shell: pwsh
      run: |
        ./installer/Build-Windows-Installer.ps1 -Version "${{ steps.get_version.outputs.VERSION }}"
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: QuickMind-Windows-v${{ steps.get_version.outputs.VERSION }}
        path: ./dist/QuickMind-Setup-v${{ steps.get_version.outputs.VERSION }}.exe

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [osx-x64, osx-arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=2.1.0-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build and publish
      run: |
        dotnet publish -c Release -r ${{ matrix.arch }} --self-contained true -p:PublishSingleFile=false -o "./publish/${{ matrix.arch }}"
    
    - name: Create .app bundle
      run: |
        APP_NAME="QuickMind"
        BUNDLE_ID="com.quickmind.app"
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        ARCH="${{ matrix.arch }}"
        
        echo "Creating .app bundle for $ARCH..."
        
        # Ensure dist directory exists
        mkdir -p "./dist"
        
        # Create .app bundle structure
        APP_DIR="./dist/$APP_NAME-$ARCH.app"
        mkdir -p "$APP_DIR/Contents/MacOS"
        mkdir -p "$APP_DIR/Contents/Resources"
        
        # Copy executable and dependencies
        cp -r ./publish/$ARCH/* "$APP_DIR/Contents/MacOS/"
        
        # Create Info.plist
        cat > "$APP_DIR/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>QuickMind</string>
            <key>CFBundleIconFile</key>
            <string>QuickMind.icns</string>
            <key>CFBundleIdentifier</key>
            <string>$BUNDLE_ID</string>
            <key>CFBundleName</key>
            <string>$APP_NAME</string>
            <key>CFBundleDisplayName</key>
            <string>$APP_NAME</string>
            <key>CFBundleVersion</key>
            <string>$VERSION</string>
            <key>CFBundleShortVersionString</key>
            <string>$VERSION</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleSignature</key>
            <string>????</string>
            <key>LSMinimumSystemVersion</key>
            <string>11.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
            <key>LSApplicationCategoryType</key>
            <string>public.app-category.education</string>
        </dict>
        </plist>
        EOF
        
        # Convert PNG icon to ICNS if available
        if [ -f "Assets/QuickMindLogo.png" ]; then
          echo "Converting icon to .icns format..."
          mkdir -p QuickMind.iconset
          
          # Create different sizes for iconset
          sips -z 16 16     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_16x16.png
          sips -z 32 32     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_16x16@2x.png
          sips -z 32 32     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_32x32.png
          sips -z 64 64     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_32x32@2x.png
          sips -z 128 128   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_128x128.png
          sips -z 256 256   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_128x128@2x.png
          sips -z 256 256   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_256x256.png
          sips -z 512 512   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_256x256@2x.png
          sips -z 512 512   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_512x512.png
          sips -z 1024 1024 Assets/QuickMindLogo.png --out QuickMind.iconset/icon_512x512@2x.png
          
          # Create .icns file
          iconutil -c icns QuickMind.iconset
          cp QuickMind.icns "$APP_DIR/Contents/Resources/"
          
          # Clean up
          rm -rf QuickMind.iconset
        else
          echo "Warning: Logo file not found, skipping icon conversion"
        fi
        
        # Make executable
        chmod +x "$APP_DIR/Contents/MacOS/QuickMind"
        
        echo "App bundle created at: $APP_DIR"
    
    - name: Create DMG
      run: |
        APP_NAME="QuickMind"
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        ARCH="${{ matrix.arch }}"
        
        echo "Creating DMG for $ARCH..."
        
        # Ensure dist directory exists
        mkdir -p "./dist"
        
        # Create temporary directory for DMG content
        DMG_DIR="./dist/dmg_temp_$ARCH"
        mkdir -p "$DMG_DIR"
        
        # Copy app to DMG directory
        if [ ! -d "./dist/$APP_NAME-$ARCH.app" ]; then
          echo "Error: App bundle not found at ./dist/$APP_NAME-$ARCH.app"
          exit 1
        fi
        cp -r "./dist/$APP_NAME-$ARCH.app" "$DMG_DIR/"
        
        # Create symlink to Applications
        ln -s /Applications "$DMG_DIR/Applications"
        
        # Create DMG
        DMG_NAME="$APP_NAME-$ARCH-v$VERSION.dmg"
        
        # Remove existing DMG if it exists
        if [ -f "./dist/$DMG_NAME" ]; then
          echo "Removing existing DMG file..."
          rm -f "./dist/$DMG_NAME"
        fi
        
        hdiutil create -srcfolder "$DMG_DIR" -volname "$APP_NAME v$VERSION ($ARCH)" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDBZ -size 200m "./dist/$DMG_NAME"
        
        # Clean up
        rm -rf "$DMG_DIR"
        
        echo "DMG created: ./dist/$DMG_NAME"
        ls -lh "./dist/$DMG_NAME"
    
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: QuickMind-${{ matrix.arch }}-v${{ steps.get_version.outputs.VERSION }}
        path: ./dist/QuickMind-${{ matrix.arch }}-v${{ steps.get_version.outputs.VERSION }}.dmg

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=2.1.0-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Display structure
      run: find . -type f -name "*.exe" -o -name "*.dmg" | head -20
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: QuickMind v${{ steps.get_version.outputs.VERSION }}
        make_latest: true
        generate_release_notes: false
        body: |
          ## QuickMind v${{ steps.get_version.outputs.VERSION }}
          
          ### üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
          - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          - –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å UI
          - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
          
          ### üíæ –°–∫–∞—á–∞—Ç—å
          
          #### Windows
          - **QuickMind-Setup-v${{ steps.get_version.outputs.VERSION }}.exe** - –ü–æ–ª–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–ª—è Windows 10/11
          
          #### macOS
          - **QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}.dmg** - –î–ª—è Intel Macs
          - **QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}.dmg** - –î–ª—è Apple Silicon Macs (M1/M2/M3)
          
          ### üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
          
          #### Windows
          1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª `QuickMind-Setup-v${{ steps.get_version.outputs.VERSION }}.exe`
          2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –º–∞—Å—Ç–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
          4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é "–ü—É—Å–∫"
          
          #### macOS
          1. –°–∫–∞—á–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ Mac DMG —Ñ–∞–π–ª
          2. –û—Ç–∫—Ä–æ–π—Ç–µ DMG —Ñ–∞–π–ª
          3. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ QuickMind.app –≤ –ø–∞–ø–∫—É Applications
          4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ QuickMind –∏–∑ –ø–∞–ø–∫–∏ Applications
          5. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          
          ### üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
          
          #### Windows
          - Windows 10 –≤–µ—Ä—Å–∏–∏ 1809 –∏–ª–∏ –≤—ã—à–µ
          - Windows 11 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
          - 50 MB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
          
          #### macOS
          - macOS 11.0 (Big Sur) –∏–ª–∏ –≤—ã—à–µ
          - 50 MB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
          
          ### üèóÔ∏è –°–±–æ—Ä–∫–∞
          –°–æ–±—Ä–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é .NET 9.0 –∏ Avalonia UI
          
          ---
          
          **–ü–æ–ª–Ω—ã–π changelog**: https://github.com/ddenvy/QuickMind/compare/v2.0.0...v${{ steps.get_version.outputs.VERSION }}
        files: |
          QuickMind-Windows-v${{ steps.get_version.outputs.VERSION }}/QuickMind-Setup-v${{ steps.get_version.outputs.VERSION }}.exe
          QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}/QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}.dmg
          QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}/QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}.dmg
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        token: ${{ secrets.GITHUB_TOKEN }} 