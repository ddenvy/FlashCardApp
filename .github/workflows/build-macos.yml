name: Build macOS DMG

on:
  push:
    tags:
      - 'v*'  # Запускается при создании тега версии
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Позволяет запускать вручную
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '2.1.0'

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [osx-x64, osx-arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=2.1.0-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build and publish
      run: |
        dotnet publish -c Release -r ${{ matrix.arch }} --self-contained true -p:PublishSingleFile=false -o "./publish/${{ matrix.arch }}"
    
    - name: Create .app bundle
      run: |
        APP_NAME="QuickMind"
        BUNDLE_ID="com.quickmind.app"
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        ARCH="${{ matrix.arch }}"
        
        echo "Creating .app bundle for $ARCH..."
        
        # Create .app bundle structure
        APP_DIR="./dist/$APP_NAME-$ARCH.app"
        mkdir -p "$APP_DIR/Contents/MacOS"
        mkdir -p "$APP_DIR/Contents/Resources"
        
        # Copy executable and dependencies
        cp -r ./publish/$ARCH/* "$APP_DIR/Contents/MacOS/"
        
        # Create Info.plist
        cat > "$APP_DIR/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>QuickMind</string>
            <key>CFBundleIconFile</key>
            <string>QuickMind.icns</string>
            <key>CFBundleIdentifier</key>
            <string>$BUNDLE_ID</string>
            <key>CFBundleName</key>
            <string>$APP_NAME</string>
            <key>CFBundleDisplayName</key>
            <string>$APP_NAME</string>
            <key>CFBundleVersion</key>
            <string>$VERSION</string>
            <key>CFBundleShortVersionString</key>
            <string>$VERSION</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleSignature</key>
            <string>????</string>
            <key>LSMinimumSystemVersion</key>
            <string>11.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
            <key>LSApplicationCategoryType</key>
            <string>public.app-category.education</string>
        </dict>
        </plist>
        EOF
        
        # Convert PNG icon to ICNS if available
        if [ -f "Assets/QuickMindLogo.png" ]; then
          echo "Converting icon to .icns format..."
          mkdir -p QuickMind.iconset
          
          # Create different sizes for iconset
          sips -z 16 16     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_16x16.png
          sips -z 32 32     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_16x16@2x.png
          sips -z 32 32     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_32x32.png
          sips -z 64 64     Assets/QuickMindLogo.png --out QuickMind.iconset/icon_32x32@2x.png
          sips -z 128 128   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_128x128.png
          sips -z 256 256   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_128x128@2x.png
          sips -z 256 256   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_256x256.png
          sips -z 512 512   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_256x256@2x.png
          sips -z 512 512   Assets/QuickMindLogo.png --out QuickMind.iconset/icon_512x512.png
          sips -z 1024 1024 Assets/QuickMindLogo.png --out QuickMind.iconset/icon_512x512@2x.png
          
          # Create .icns file
          iconutil -c icns QuickMind.iconset
          cp QuickMind.icns "$APP_DIR/Contents/Resources/"
          
          # Clean up
          rm -rf QuickMind.iconset
        else
          echo "Warning: Logo file not found, skipping icon conversion"
        fi
        
        # Make executable
        chmod +x "$APP_DIR/Contents/MacOS/QuickMind"
        
        echo "App bundle created at: $APP_DIR"
    
    - name: Create DMG
      run: |
        APP_NAME="QuickMind"
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        ARCH="${{ matrix.arch }}"
        
        echo "Creating DMG for $ARCH..."
        
        # Create temporary directory for DMG content
        DMG_DIR="./dist/dmg_temp_$ARCH"
        mkdir -p "$DMG_DIR"
        
        # Copy app to DMG directory
        cp -r "./dist/$APP_NAME-$ARCH.app" "$DMG_DIR/"
        
        # Create symlink to Applications
        ln -s /Applications "$DMG_DIR/Applications"
        
        # Create a nice background and layout (optional)
        mkdir -p "$DMG_DIR/.background"
        
        # Create DMG
        DMG_NAME="$APP_NAME-$ARCH-v$VERSION.dmg"
        hdiutil create -srcfolder "$DMG_DIR" -volname "$APP_NAME v$VERSION ($ARCH)" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDBZ -size 200m "./dist/$DMG_NAME"
        
        # Clean up
        rm -rf "$DMG_DIR"
        
        echo "DMG created: ./dist/$DMG_NAME"
        ls -lh "./dist/$DMG_NAME"
    
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: QuickMind-${{ matrix.arch }}-v${{ steps.get_version.outputs.VERSION }}
        path: ./dist/QuickMind-${{ matrix.arch }}-v${{ steps.get_version.outputs.VERSION }}.dmg
    
    - name: Upload App Bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: QuickMind-${{ matrix.arch }}-app
        path: ./dist/QuickMind-${{ matrix.arch }}.app/

  create-release:
    needs: build-macos
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=2.1.0-dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: QuickMind v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## QuickMind v${{ steps.get_version.outputs.VERSION }}
          
          ### macOS Downloads
          - **Intel Macs**: QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}.dmg
          - **Apple Silicon Macs**: QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}.dmg
          
          ### Installation Instructions
          1. Download the appropriate DMG file for your Mac
          2. Open the DMG file
          3. Drag QuickMind.app to your Applications folder
          4. Launch QuickMind from Applications
          
          ### System Requirements
          - macOS 11.0 (Big Sur) or later
          - 50 MB free disk space
          
          Built with .NET 9.0 and Avalonia UI.
        files: |
          QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}/QuickMind-osx-x64-v${{ steps.get_version.outputs.VERSION }}.dmg
          QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}/QuickMind-osx-arm64-v${{ steps.get_version.outputs.VERSION }}.dmg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 